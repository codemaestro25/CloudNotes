const express = require('express');
const router = express.Router();
const User = require('../models/User');
const { body, validationResult } = require('express-validator');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const fetchuser = require('../middleware/fetchuser');


const JWT_SECRET = 'leftisright';


//Route 1 - creating a user using : POST : /api/auth/createuser ; no login required
router.post('/createuser', [
    body('name', "Username should be of minimum 6 characters").isLength({ min: 6 }),
    body('email', "Please enter proper email dude").isEmail(),
    body('password', "Password should be of minimum 8 characters").isLength({ min: 8 })
], async (req, res) => {
let success = false;
    //if there are any errors return a bad request

    const errors = validationResult(req);
    //checking whether array contaioning errors is empty or not
    // if not empty then display the errors in json format
    if (!errors.isEmpty()) {
        
        return res.status(400).json({success, errors: errors.array() });
    }

    //Checking whether the user with this email already exists or not
    try {
        let user = await User.findOne({ email: req.body.email });
        console.log(user)
        if (user) {
        return    res.status(400).json({success, error: "Sorry this Email already exists" })
        }

        //to hash the password

        const salt = await bcrypt.genSalt(10);
        const securePass = await bcrypt.hash(req.body.password, salt)

        user = await User.create({
            name: req.body.name,
            email: req.body.email,
            password: securePass
        })

        //CREATING THE AUTHENTICATION TOKEN

        const data  = {
            user : {
                id:user.id
            }
        }

        //signing the authentication token which wil be provided to the user
        // we sign the token to get to know that whether user is tampering or not in the next login attempt by giving it our own signature to the authentication token

        const authToken = jwt.sign(data,JWT_SECRET);
        success = true;
        return res.send({ success,authToken })
    } 
    catch (err) {
        // console.error(err.message);
        res.status(400).json({error: "Some error occured, coudlnt procced your request"})

    }

})

//Route 2 create an  endpoint for login /api/auth/login
router.post('/login', [
    body('email',"Please enter a proper email").isEmail(),
    body('password','password cannot be blank').exists()
], async(req, res)=>{
    let success = false;
    const errors = validationResult(req);
    if(!errors.isEmpty()){
        return res.status(400).json({errors:errors.array()});
    }

    //destructuring the user contents

    const {email, password} = req.body;
try{
    let user = await User.findOne({email});
    //if user doesnt exist with the submitted email then return a bad request
    if(!user){
        return res.status(400).json({success,error:"Invalid email credentials"})

    }
//checking the password

const comparePassword  = await bcrypt.compare(password , user.password);

if(!comparePassword){
    
    return res.status(400).json({success,error: "Invalid password Credentials"});
}

//if both the creds are correct then
const data = {
    user: {
        id:user.id // fetching the unique id of user data generated by MongoDB
    }
}
// above data also refers to payload

//signing and generating the authet
const authToken = jwt.sign(data , JWT_SECRET);
success = true;
const name = user.name;
return res.json({name ,success , authToken});

}catch(err){
    console.error(err.message);

    res.status(400).json({error:"Sorry! Internal server error occured"});

}
})

// Route 3 - Fetching user details with the help of AuthToken using a middleware fetchuser.js. Login required i.e. existing authtoken will be required

router.post('/getuser' , fetchuser, async (req, res)=>{
    try {
        userID = req.user.id; // fetching the unique id from fetchuser middleware 
        const user = await User.findById(userID).select("-password");//fetching all the details of the user except the password by using the unique id fetched using the authtoken
        res.send(user);
    } catch (error) {
        console.error(error.message);
       res.status(500).send("Internal Server Error");
    }
})



module.exports = router;










// console.log(req.body);
// const user = User(req.body);
// user.save();
// res.send(req.body);

 // .then(user=>res.json(user)).catch(err=>{console.log(err);
    //     res.json({error:"Please enter a unique email"})});